import torch
from collections import OrderedDict

# change = ["spynet.basic_module.0.conv1.weight", "spynet.basic_module.0.conv1.bias", "spynet.basic_module.0.conv2.weight", "spynet.basic_module.0.conv2.bias", "spynet.basic_module.0.conv3.weight", "spynet.basic_module.0.conv3.bias", "spynet.basic_module.0.conv4.weight", "spynet.basic_module.0.conv4.bias", "spynet.basic_module.0.conv5.weight", "spynet.basic_module.0.conv5.bias", "spynet.basic_module.1.conv1.weight", "spynet.basic_module.1.conv1.bias", "spynet.basic_module.1.conv2.weight", "spynet.basic_module.1.conv2.bias", "spynet.basic_module.1.conv3.weight", "spynet.basic_module.1.conv3.bias", "spynet.basic_module.1.conv4.weight", "spynet.basic_module.1.conv4.bias", "spynet.basic_module.1.conv5.weight", "spynet.basic_module.1.conv5.bias", "spynet.basic_module.2.conv1.weight", "spynet.basic_module.2.conv1.bias", "spynet.basic_module.2.conv2.weight", "spynet.basic_module.2.conv2.bias", "spynet.basic_module.2.conv3.weight", "spynet.basic_module.2.conv3.bias", "spynet.basic_module.2.conv4.weight", "spynet.basic_module.2.conv4.bias", "spynet.basic_module.2.conv5.weight", "spynet.basic_module.2.conv5.bias", "spynet.basic_module.3.conv1.weight", "spynet.basic_module.3.conv1.bias", "spynet.basic_module.3.conv2.weight", "spynet.basic_module.3.conv2.bias", "spynet.basic_module.3.conv3.weight", "spynet.basic_module.3.conv3.bias", "spynet.basic_module.3.conv4.weight", "spynet.basic_module.3.conv4.bias", "spynet.basic_module.3.conv5.weight", "spynet.basic_module.3.conv5.bias", "spynet.basic_module.4.conv1.weight", "spynet.basic_module.4.conv1.bias", "spynet.basic_module.4.conv2.weight", "spynet.basic_module.4.conv2.bias", "spynet.basic_module.4.conv3.weight", "spynet.basic_module.4.conv3.bias", "spynet.basic_module.4.conv4.weight", "spynet.basic_module.4.conv4.bias", "spynet.basic_module.4.conv5.weight", "spynet.basic_module.4.conv5.bias", "spynet.basic_module.5.conv1.weight", "spynet.basic_module.5.conv1.bias", "spynet.basic_module.5.conv2.weight", "spynet.basic_module.5.conv2.bias", "spynet.basic_module.5.conv3.weight", "spynet.basic_module.5.conv3.bias", "spynet.basic_module.5.conv4.weight", "spynet.basic_module.5.conv4.bias", "spynet.basic_module.5.conv5.weight", "spynet.basic_module.5.conv5.bias"]
# ori = ["spynet.basic_module.0.basic_module.0.weight", "spynet.basic_module.0.basic_module.0.bias", "spynet.basic_module.0.basic_module.2.weight", "spynet.basic_module.0.basic_module.2.bias", "spynet.basic_module.0.basic_module.4.weight", "spynet.basic_module.0.basic_module.4.bias", "spynet.basic_module.0.basic_module.6.weight", "spynet.basic_module.0.basic_module.6.bias", "spynet.basic_module.0.basic_module.8.weight", "spynet.basic_module.0.basic_module.8.bias", "spynet.basic_module.1.basic_module.0.weight", "spynet.basic_module.1.basic_module.0.bias", "spynet.basic_module.1.basic_module.2.weight", "spynet.basic_module.1.basic_module.2.bias", "spynet.basic_module.1.basic_module.4.weight", "spynet.basic_module.1.basic_module.4.bias", "spynet.basic_module.1.basic_module.6.weight", "spynet.basic_module.1.basic_module.6.bias", "spynet.basic_module.1.basic_module.8.weight", "spynet.basic_module.1.basic_module.8.bias", "spynet.basic_module.2.basic_module.0.weight", "spynet.basic_module.2.basic_module.0.bias", "spynet.basic_module.2.basic_module.2.weight", "spynet.basic_module.2.basic_module.2.bias", "spynet.basic_module.2.basic_module.4.weight", "spynet.basic_module.2.basic_module.4.bias", "spynet.basic_module.2.basic_module.6.weight", "spynet.basic_module.2.basic_module.6.bias", "spynet.basic_module.2.basic_module.8.weight", "spynet.basic_module.2.basic_module.8.bias", "spynet.basic_module.3.basic_module.0.weight", "spynet.basic_module.3.basic_module.0.bias", "spynet.basic_module.3.basic_module.2.weight", "spynet.basic_module.3.basic_module.2.bias", "spynet.basic_module.3.basic_module.4.weight", "spynet.basic_module.3.basic_module.4.bias", "spynet.basic_module.3.basic_module.6.weight", "spynet.basic_module.3.basic_module.6.bias", "spynet.basic_module.3.basic_module.8.weight", "spynet.basic_module.3.basic_module.8.bias", "spynet.basic_module.4.basic_module.0.weight", "spynet.basic_module.4.basic_module.0.bias", "spynet.basic_module.4.basic_module.2.weight", "spynet.basic_module.4.basic_module.2.bias", "spynet.basic_module.4.basic_module.4.weight", "spynet.basic_module.4.basic_module.4.bias", "spynet.basic_module.4.basic_module.6.weight", "spynet.basic_module.4.basic_module.6.bias", "spynet.basic_module.4.basic_module.8.weight", "spynet.basic_module.4.basic_module.8.bias", "spynet.basic_module.5.basic_module.0.weight", "spynet.basic_module.5.basic_module.0.bias", "spynet.basic_module.5.basic_module.2.weight", "spynet.basic_module.5.basic_module.2.bias", "spynet.basic_module.5.basic_module.4.weight", "spynet.basic_module.5.basic_module.4.bias", "spynet.basic_module.5.basic_module.6.weight", "spynet.basic_module.5.basic_module.6.bias", "spynet.basic_module.5.basic_module.8.weight", "spynet.basic_module.5.basic_module.8.bias"]

# model= torch.load('experiments/pretrained_models/BasicVSR/BasicVSR_REDS4-543c8261.pth')
# newStateDict = OrderedDict()

# for key, val in model['params'].items():
#     print(key)
#     if key in ori:
#         newStateDict[change[ori.index(key)]] = val
#     else:
#         newStateDict[key] = val

# torch.save(newStateDict, 'experiments/pretrained_models/BasicVSR/fixed_basicvsr_model.pytorch')


ori = ["spynet.mean", "spynet.std", "spynet.basic_module.0.conv1.weight", "spynet.basic_module.0.conv1.bias", "spynet.basic_module.0.conv2.weight", "spynet.basic_module.0.conv2.bias", "spynet.basic_module.0.conv3.weight", "spynet.basic_module.0.conv3.bias", "spynet.basic_module.0.conv4.weight", "spynet.basic_module.0.conv4.bias", "spynet.basic_module.0.conv5.weight", "spynet.basic_module.0.conv5.bias", "spynet.basic_module.1.conv1.weight", "spynet.basic_module.1.conv1.bias", "spynet.basic_module.1.conv2.weight", "spynet.basic_module.1.conv2.bias", "spynet.basic_module.1.conv3.weight", "spynet.basic_module.1.conv3.bias", "spynet.basic_module.1.conv4.weight", "spynet.basic_module.1.conv4.bias", "spynet.basic_module.1.conv5.weight", "spynet.basic_module.1.conv5.bias", "spynet.basic_module.2.conv1.weight", "spynet.basic_module.2.conv1.bias", "spynet.basic_module.2.conv2.weight", "spynet.basic_module.2.conv2.bias", "spynet.basic_module.2.conv3.weight", "spynet.basic_module.2.conv3.bias", "spynet.basic_module.2.conv4.weight", "spynet.basic_module.2.conv4.bias", "spynet.basic_module.2.conv5.weight", "spynet.basic_module.2.conv5.bias", "spynet.basic_module.3.conv1.weight", "spynet.basic_module.3.conv1.bias", "spynet.basic_module.3.conv2.weight", "spynet.basic_module.3.conv2.bias", "spynet.basic_module.3.conv3.weight", "spynet.basic_module.3.conv3.bias", "spynet.basic_module.3.conv4.weight", "spynet.basic_module.3.conv4.bias", "spynet.basic_module.3.conv5.weight", "spynet.basic_module.3.conv5.bias", "spynet.basic_module.4.conv1.weight", "spynet.basic_module.4.conv1.bias", "spynet.basic_module.4.conv2.weight", "spynet.basic_module.4.conv2.bias", "spynet.basic_module.4.conv3.weight", "spynet.basic_module.4.conv3.bias", "spynet.basic_module.4.conv4.weight", "spynet.basic_module.4.conv4.bias", "spynet.basic_module.4.conv5.weight", "spynet.basic_module.4.conv5.bias", "spynet.basic_module.5.conv1.weight", "spynet.basic_module.5.conv1.bias", "spynet.basic_module.5.conv2.weight", "spynet.basic_module.5.conv2.bias", "spynet.basic_module.5.conv3.weight", "spynet.basic_module.5.conv3.bias", "spynet.basic_module.5.conv4.weight", "spynet.basic_module.5.conv4.bias", "spynet.basic_module.5.conv5.weight", "spynet.basic_module.5.conv5.bias"]

model= torch.load('pretrained_models/BasicVSR/fixed_basicvsr_model.pytorch')
newStateDict = OrderedDict()

for key, val in model.items():
    if key in ori:
        newStateDict[key[7:]] = val
    # else:
    #     if key == 'spynet.mean' or key == 'spynet.std':
    #         pass
    #     else:
    #         newspynet[key[7:]] = val

torch.save(newStateDict, 'pretrained_models/flownet/spynet_inbasicvsr.pytorch')